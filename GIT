Git 1.é descentralizado cada repositório é um nó na rede o que significa que cada repositorio é um ponto de distribuição de informação
working tree ou work directory = area onde ficam os arquivos não rastreados
Stagin Area ou Index = área onde os arquivos vão quando estão prontos para serem comitados 
Commit = 1.é o estado do repositorio em um dado momento 
conflitos de um merge = 1. surje quando se altera a mesma linha do arquivo

Head = Mostra a versão na qual você esta trabalhando atualmente 
origin/master em vermelho = mostra onde ocorreu o push

git init = Inicializa um repositorio vazio
git comando -h = pede ajuda
git checkout -- a.txt = Discarta Alterações no working tree 
git init --bare = 1.repositorios compartilhados devem ser criados com a flag --bare 2.é impossivel editar arquivos e fazer commits 
git diff HashIDanterior..HashIDposterior = compara as diferenças dos arquivos
git commit --amend -m "muda mesagem do commit"
git commit --amend -m "altera o repositorio deste commit"
git reset HEAD --HARD = volta todos os arquivos para o ultimo commit , não deleta novos arquivos
git reset HEAD^ --HARD = Descarta o ultimo commit
git shortlog = Mostra quem contribui e com o que contribui
git merge = ele unifica o historico bifurcado e mescla os arquivos
git rebase = move ou combina uma sequência de commit , altera a base da ramificação fazendo parecer que você criou a base da ramificação apartir de outro 
commit 
git fetch = baixa os arquivos sem fazer o merge
git pull = baixa os arquivos e faz o merge
git tag = usado para salvar diferentes versões

refs = São Qualquer Coisa que Você Possa Encontrar em .git/refs
refs^ = um commit antes
refs^^= dois commits antes
refs~n = n commits antes
git reflog <refs> = mostra onde a referencia tem estado
refs@{5} =mostre a apartir do 5 local onde ele esteve
refs@{yesterday} or refs@{1.week.ago}
<tree-ish> = podem ser (branches,Head,commit,refs)

